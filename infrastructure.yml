AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Projet OC
Parameters:
  DBNAME:
    Type: String 
    Default: WordPress
    Description: Le nom de la Database
    # AllowedPattern: ^([a-z0-A-Z9]*)$
  DBUSER:
    Type: String 
    Default: WordPressUser
    Description: Le nom du Database user
    # AllowedPattern: ^([a-z0-A-Z9]*)$
  DBPASSWORD:
    Type: String 
    Default: WordPressPassword
    Description: Le mdp pour la Database
    # AllowedPattern: ^([a-z0-A-Z9]*)$
  VolumeName:
    Description: The name to be used for the EFS volume
    Type: String
    Default: myEFSvolume
  MountPoint:
    Description: The Linux mount point for the EFS volume
    Type: String
    Default: myEFSvolume
  paramBucketName:
    Type: String
    Description: Nom du bucket S3

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: 'VPC'
  
  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      MultiAZ: "true"
      AllocatedStorage: "20"
      DBInstanceClass: "db.t2.micro"
      Engine: "MySQL"
      DBName: !Ref DBNAME
      MasterUsername: !Ref DBUSER
      MasterUserPassword: !Ref DBPASSWORD
      DBSubnetGroupName: !Ref DBServerSubnetGroup
      VPCSecurityGroups: 
        - Fn::GetAtt: [ DBSecurityGroup, GroupId ]
  
  DBServerSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Groupe de Subnet pour le RDS"
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB 
      Tags:
        - Key: Name 
          Value: DB-Group-Subnets 
  
  DBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Groupe de securite pour RDS"
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC      
      
 ################################# SUBNET  ################################# 

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.100.0/24
      Tags:
        - Key: Name
          Value: 'MainVPC-public-AZ-A'
      VpcId: !Ref VPC

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.101.0/24
      Tags:
        - Key: Name
          Value: 'MainVPC-public-AZ-B'
      VpcId: !Ref VPC
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: 'MainVPC-private-AZ-A'
      VpcId: !Ref VPC

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: 'MainVPC-private-AZ-B'
      VpcId: !Ref VPC
  
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: 'MainVPC-private-AZ-C'
      VpcId: !Ref VPC

  WordpressScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: EC-WordPress
      LaunchConfigurationName: !Ref WordpressEC2LaunchConfig
      # AvailabilityZones:
      #   - Fn::Select:
      #     - 1
      #     - Fn::GetAZs: !Ref AWS::Region 
      #   - Fn::Select:
      #     - 2
      #     - Fn::GetAZs: !Ref AWS::Region 
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs:
        - !Ref WordpressEC2TargetGroup

  WordpressEC2LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - RDSInstance
      - FileSystem
    Properties:
      AssociatePublicIpAddress: true
      LaunchConfigurationName: WP-Launcher
      ImageId: ami-0f4c4d9ba38fd756e
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref InstancesWPSecurityGroup
      KeyName : "ec2wp" 
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get upgrade -y
          apt-get install -y nfs-common
          mkdir /mnt/efs
          cd /mnt
          mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${FileSystem}.efs.eu-west-3.amazonaws.com:/ /mnt/efs
          cd 
          wget https://gist.githubusercontent.com/jnthnm/7e19aed55ad5709a614b3e84b3473597/raw/0ca34c0a709617682d1e6476369bd4d78400ebf9/docker-compose.yml -P /root/
          sed -i 's/nomdomaine/${WordpressEC2LoadBalancer.DNSName}/g' /root/docker-compose.yml
          sed -i 's/namehostwp/${RDSInstance.Endpoint.Address}/g' /root/docker-compose.yml
          sed -i 's/nameuserwp/${DBUSER}/g' /root/docker-compose.yml
          sed -i 's/passworddbwp/${DBPASSWORD}/g' /root/docker-compose.yml
          sed -i 's/namedbwp/${DBNAME}/g' /root/docker-compose.yml 
          cd /root
          docker-compose up -d
          sed -i "91idefine( 'AS3CF_AWS_ACCESS_KEY_ID', '${S3UserAccessKey}' );" /mnt/efs/wp_data/wp-config.php 
          sed -i "92idefine( 'AS3CF_AWS_SECRET_ACCESS_ID', '${S3UserAccessKey.SecretAccessKey}' );" /mnt/efs/wp_data/wp-config.php
          sed -i "93idefine( 'AS3CF_AWS_SECRET_ACCESS_ID', '${S3Bucket}' );" /mnt/efs/wp_data/wp-config.php  
  
  WordpressEC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WP-Target
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  
  ### ELB LOADBALANCER ###
  WordpressEC2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WP-EC2
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
  
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WordpressEC2LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WordpressEC2TargetGroup

  InstancesWPSecurityGroup: 
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
    
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable port 80 HTTP
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: 80
           ToPort: 80
           CidrIp: 0.0.0.0/0
  
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0

  MountTargetOne:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId: !Ref PublicSubnetA
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  
  MountTargetTwo:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId: !Ref PublicSubnetB
      SecurityGroups:
      - Ref: MountTargetSecurityGroup

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          Ref: VolumeName
  
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Ref paramBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3User:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: bucket-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:*
              Resource:
                - !Sub arn:aws:s3:::${S3Bucket}
                - !Sub arn:aws:s3:::${S3Bucket}/*
  S3UserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref S3User
   
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: 'MainVPC-InternetGateway'
  
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

  AttachPrivateRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-a
  
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-b
  
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MainVPC-route-private-c
  
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
  
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
  
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableC

Outputs:
    BucketName:
      Value: !Ref 'S3Bucket'
      Description: Name of the Amazon S3 bucket.
    S3BucketSecureURL:
      Value: !Join ['', ['https://', !GetAtt [S3Bucket, DomainName]]]
      Description: Domain Name of the Amazon S3 bucket
    AccessKeyID:
      Value: !Ref S3UserAccessKey
    SecretAccessKey:
      Value: !GetAtt S3UserAccessKey.SecretAccessKey
    BucketName:
      Value: !Ref S3Bucket
    User:
      Value: !Ref S3User


  


  




