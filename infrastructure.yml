AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Projet OC
Parameters:
  DBNAME:
    Type: String 
    Default: WordPress
    Description: Le nom de la Database
  DBUSER:
    Type: String 
    Default: WordPressUser
    Description: Le nom du Database user
  DBPASSWORD:
    Type: String 
    Default: WordPressPassword
    Description: Le mdp pour la Database
  paramBucketName:
    Type: String
    Description: Nom du bucket S3

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: 'VPC'
  
  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      MultiAZ: "true"
      AllocatedStorage: "20"
      DBInstanceClass: "db.t2.micro"
      Engine: "MySQL"
      DBName: !Ref DBNAME
      MasterUsername: !Ref DBUSER
      MasterUserPassword: !Ref DBPASSWORD
      DBSubnetGroupName: !Ref DBServerSubnetGroup
      VPCSecurityGroups: 
        - Fn::GetAtt: [ DBSecurityGroup, GroupId ]

############################################ SECURITY GROUPS ############################################  

  DBServerSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Groupe de Subnet pour le RDS"
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB 
      Tags:
        - Key: Name 
          Value: DB-Group-Subnets 
  
  DBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Groupe de securite pour RDS"
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC      
  
  InstancesWPSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
    
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable port 80 HTTP
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: 80
           ToPort: 80
           CidrIp: 0.0.0.0/0
  
  IntranetSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group INTRANET 
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
           
  VPNSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group VPN 
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 51820
          ToPort: 51820
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

 ############################################ SUBNETS ############################################  

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.100.0/26
      Tags:
        - Key: Name
          Value: 'MainVPC-public-AZ-A'
      VpcId: !Ref VPC

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.101.0/26
      Tags:
        - Key: Name
          Value: 'MainVPC-public-AZ-B'
      VpcId: !Ref VPC
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.3.0/26
      Tags:
        - Key: Name
          Value: 'MainVPC-private-AZ-A'
      VpcId: !Ref VPC

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.4.0/26
      Tags:
        - Key: Name
          Value: 'MainVPC-private-AZ-B'
      VpcId: !Ref VPC
  
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.5.0/26
      Tags:
        - Key: Name
          Value: 'MainVPC-private-AZ-C'
      VpcId: !Ref VPC

############################################ CLOUDWATCH ############################################  

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CPU Alarme 80%"
      AlarmDescription: Alarme de CPU si l'usage dépasse 80%
      AlarmActions:
      - Ref: CPUScalingHighPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '80'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WordpressScalingGroup
  
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CPU Alarme 30%"
      AlarmDescription: Alarme de CPU si l'usage est à 30%
      AlarmActions:
      - Ref: CPUScalingLowPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '30'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WordpressScalingGroup
  
  AlarmsSnsTopicCPU:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: moriennejonathan@gmail.com
          Protocol: "email"
   
  MySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: moriennejonathan@gmail.com
      Protocol: email
      TopicArn: !Ref AlarmsSnsTopicCPU
  
############################################ CPU AUTOSCALING POLICY POUR LES DEUX ALARMES ############################################  

  CPUScalingHighPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '1'
      Cooldown: 60
      PolicyType: SimpleScaling
      AutoScalingGroupName: !Ref WordpressScalingGroup
  
  CPUScalingLowPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '-1'
      Cooldown: 60
      PolicyType: SimpleScaling
      AutoScalingGroupName: !Ref WordpressScalingGroup

############################################ WORDPRESS SCALING GROUP ############################################

  WordpressScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: EC-WordPress
      LaunchConfigurationName: !Ref WordpressEC2LaunchConfig
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs:
        - !Ref WordpressEC2TargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref AlarmsSnsTopicCPU
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      
  WordpressEC2LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - RDSInstance
      - FileSystem
    Properties:
      AssociatePublicIpAddress: true
      LaunchConfigurationName: WP-Launcher
      ImageId: ami-0f4c4d9ba38fd756e
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref InstancesWPSecurityGroup
      KeyName : "ec2wp" 
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get upgrade -y
          sudo apt-get install -y stress-ng
          apt-get install -y nfs-common
          cd /mnt/
          mkdir efs 
          cd /efs/
          mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${FileSystem}.efs.eu-west-3.amazonaws.com:/ /mnt/efs
          wget https://gist.githubusercontent.com/jnthnm/7e19aed55ad5709a614b3e84b3473597/raw/b61daff171173900e48effb03553b3438aee1042/docker-compose.yml /mnt/efs/docker-compose.yml
          docker-compose up -d
          docker exec mnt_wordpress_1 wp config create --dbname="${DBNAME}" --dbuser="${DBUSER}" --dbpass="${DBPASSWORD}" --dbhost="${RDSInstance.Endpoint.Address}"
          docker exec mnt_wordpress_1 wp core install --path="/var/www/html" --url="http://${WordpressEC2LoadBalancer.DNSName}" --title="Mon site WP" --admin_user=jmz --admin_password=secret --admin_email=nknlol75@gmail.com --allow-root
          docker exec mnt_wordpress_1 wp plugin update --all --allow-root
          docker exec mnt_wordpress_1 wp plugin install amazon-s3-and-cloudfront --activate --allow-root
          docker exec mnt_wordpress_1 wp theme update --all --allow-root
          docker exec mnt_wordpress_1 wp language core update --allow-root
          docker exec mnt_wordpress_1 wp language theme update --all --allow-root
          docker exec mnt_wordpress_1 wp language plugin update --all --allow-root
          sed -i "68idefine( 'AS3CF_SETTINGS', serialize( array('provider' => 'aws','access-key-id' => '${S3UserAccessKey}','secret-access-key' => '${S3UserAccessKey.SecretAccessKey}','bucket' => '${S3Bucket}','region' => 'eu-west-3','copy-to-s3' => true,'serve-from-s3' => true ,'remove-local-file' => true,) ) );" wp_data/wp-config.php
   
  WordpressEC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WP-Target
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true

  WordpressEC2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WP-EC2
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WordpressEC2LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WordpressEC2TargetGroup
    
############################################ MOUNT ############################################ 

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0

  MountTargetOne:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId: !Ref PublicSubnetA
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  
  MountTargetTwo:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId: !Ref PublicSubnetB
      SecurityGroups:
      - Ref: MountTargetSecurityGroup

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value: FileSystem

############################################ S3 BUCKET ############################################     

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Ref paramBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3User:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: bucket-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:*
              Resource:
                - !Sub arn:aws:s3:::${S3Bucket}
                - !Sub arn:aws:s3:::${S3Bucket}/*

  S3UserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref S3User

############################################ INTERNET GATEWAY ############################################   

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: 'MainVPC-InternetGateway'
  
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

  AttachPrivateRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-a
  
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MainVPC-route-public-b
  
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MainVPC-route-private-c
  
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
  
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
  
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableC

############################################ VPN ################################################  

  PasserelleVPNEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-089be8446d6ed4bed
      InstanceType: t2.micro
      KeyName : "ec2wp" 
      NetworkInterfaces:
          - DeviceIndex: 0
            GroupSet:
              - !Ref VPNSecurityGroup
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            SubnetId: !Ref PrivateSubnetC
            PrivateIpAddress: 10.0.5.50
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          sudo apt-get upgrade -y
     
  Intranet:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00f6fe7d6cbb56a78
      InstanceType: t2.micro
      KeyName : "ec2wp" 
      NetworkInterfaces:
          - DeviceIndex: 0
            GroupSet:
              - !Ref IntranetSecurityGroup
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            SubnetId: !Ref PrivateSubnetC
            PrivateIpAddress: 10.0.5.51
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get upgrade -y
          apt-get install -y apache2

############################################ EIP ############################################  
  
  ElasticIPAddress:
    Type: AWS::EC2::EIPAssociation
    Properties: 
      EIP: !Ref MyEIP
      InstanceId: !Ref PasserelleVPNEC2
      NetworkInterfaceId: !Ref PasserelleVPNEC2

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref PasserelleVPNEC2

############################################ OUTPUTS ############################################ 

Outputs:
    BucketName:
      Value: !Ref 'S3Bucket'
      Description: Name of the Amazon S3 bucket.
    S3BucketSecureURL:
      Value: !Join ['', ['https://', !GetAtt [S3Bucket, DomainName]]]
      Description: Domain Name of the Amazon S3 bucket
    AccessKeyID:
      Value: !Ref S3UserAccessKey
    SecretAccessKey:
      Value: !GetAtt S3UserAccessKey.SecretAccessKey
    BucketName:
      Value: !Ref S3Bucket
    User:
      Value: !Ref S3User



  




